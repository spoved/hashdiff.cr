{"repository_name":"hashdiff","body":"# hashdiff\n\nHashdiff is a crystal library to compute the smallest difference between two hashes. It was translated from the [hashdiff](https://github.com/liufengyun/hashdiff) ruby gem.\n\nIt also supports comparing two arrays.\n\nHashdiff does not monkey-patch any existing class. All features are contained inside the `Hashdiff` module.\n\n[![.github/workflows/ci.yml](https://github.com/spoved/hashdiff.cr/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/spoved/hashdiff.cr/actions/workflows/ci.yml) [![GitHub release](https://img.shields.io/github/release/spoved/hashdiff.cr.svg)](https://github.com/spoved/hashdiff.cr/releases)\n\n## Why Hashdiff?\n\nGiven two Hashes A and B, sometimes you face the question: what's the smallest modification that can be made to change A into B?\n\nAn algorithm that responds to this question has to do following:\n\n- Generate a list of additions, deletions and changes, so that `A + ChangeSet = B` and `B - ChangeSet = A`.\n- Compute recursively -- Arrays and Hashes may be nested arbitrarily in A or B.\n- Compute the smallest change -- it should recognize similar child Hashes or child Arrays between A and B.\n\nHashdiff answers the question above using an opinionated approach:\n\n- Hash can be represented as a list of (dot-syntax-path, value) pairs. For example, `{a: [{c: 2}]}` can be represented as `[\"a[0].c\", 2]`.\n- The change set can be represented using the dot-syntax representation. For example, `[{\"-\", \"b.x\", 3}, {\"~\", \"b.z\", 45, 30}, {\"+\", \"b.y\", 3}]`.\n- It compares Arrays using the [LCS (longest common subsequence)](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem) algorithm.\n- It recognizes similar Hashes in an Array using a similarity value (0 < similarity <= 1).\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     hashdiff:\n       github: spoved/hashdiff.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"hashdiff\"\n```\n\n### Diff\n\nTwo simple hashes:\n\n```crystal\na = {a: 3, b: 2}\nb = {}\n\ndiff = Hashdiff.diff(a, b)\ndiff.should == [{\"-\", \"a\", 3}, {\"-\", \"b\", 2}]\n```\n\nMore complex hashes:\n\n```crystal\na = {a: {x: 2, y: 3, z: 4}, b: {x: 3, z: 45}}\nb = {a: {y: 3}, b: {y: 3, z: 30}}\n\ndiff = Hashdiff.diff(a, b)\ndiff.should == [{\"-\", \"a.x\", 2}, {\"-\", \"a.z\", 4}, {\"-\", \"b.x\", 3}, {\"~\", \"b.z\", 45, 30}, {\"+\", \"b.y\", 3}]\n```\n\nArrays in hashes:\n\n```crystal\na = {a: [{x: 2, y: 3, z: 4}, {x: 11, y: 22, z: 33}], b: {x: 3, z: 45}}\nb = {a: [{y: 3}, {x: 11, z: 33}], b: {y: 22}}\n\ndiff = Hashdiff.best_diff(a, b)\ndiff.should == [{\"-\", \"a[0].x\", 2}, {\"-\", \"a[0].z\", 4}, {\"-\", \"a[1].y\", 22}, {\"-\", \"b.x\", 3}, {\"-\", \"b.z\", 45}, {\"+\", \"b.y\", 22}]\n```\n\n### Patch\n\npatch example:\n\n```crystal\na = {\"a\" => 3}\nb = {\"a\" => {\"a1\" => 1, \"a2\" => 2}}\n\ndiff = Hashdiff.diff(a, b)\nHashdiff.patch!(a, diff).should == b\n```\n\nunpatch example:\n\n```crystal\na = [{\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5}, {\"x\" => 5, \"y\" => 6, \"z\" => 3}, 1]\nb = [1, {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"e\" => 5}]\n\ndiff = Hashdiff.diff(a, b) # diff two array is OK\nHashdiff.unpatch!(b, diff).should == a\n```\n\n### Options\n\nThere are eight options available: `:delimiter`, `:similarity`,\n`:strict`, `:indifferent`, `:numeric_tolerance`, `:strip`, `:case_insensitive`,\n`:array_path` and `:use_lcs`\n\n#### `:delimiter`\n\nYou can specify `:delimiter` to be something other than the default dot. For example:\n\n```crystal\na = {a: {x: 2, y: 3, z: 4}, b: {x: 3, z: 45}}\nb = {a: {y: 3}, b: {y: 3, z: 30}}\n\ndiff = Hashdiff.diff(a, b, delimiter: \"\\t\")\ndiff.should == [{\"-\", \"a\\tx\", 2}, {\"-\", \"a\\tz\", 4}, {\"-\", \"b\\tx\", 3}, {\"~\", \"b\\tz\", 45, 30}, {\"+\", \"b\\ty\", 3}]\n```\n\n#### `:similarity`\n\nIn cases where you have similar hash objects in arrays, you can pass a custom value for `:similarity` instead of the default `0.8`. This is interpreted as a ratio of similarity (default is 80% similar, whereas `:similarity => 0.5` would look for at least a 50% similarity).\n\n#### `:strict`\n\nThe `:strict` option, which defaults to `true`, specifies whether numeric types are compared on type as well as value. By default, an Integer will never be equal to a Float (e.g. 4 != 4.0). Setting `:strict` to false makes the comparison looser (e.g. 4 == 4.0).\n\n#### `:indifferent`\n\nThe `:indifferent` option, which defaults to `false`, specifies whether to treat hash keys indifferently. Setting `:indifferent` to true has the effect of ignoring differences between symbol keys (ie. {a: 1} ~= {\"a\" => 1})\n\n#### `:numeric_tolerance`\n\nThe :numeric_tolerance option allows for a small numeric tolerance.\n\n```crystal\na = {x: 5, y: 3.75, z: 7}\nb = {x: 6, y: 3.76, z: 7}\n\ndiff = Hashdiff.diff(a, b, numeric_tolerance: 0.1)\ndiff.should == [{\"~\", \"x\", 5, 6}]\n```\n\n#### `:strip`\n\nThe :strip option strips all strings before comparing.\n\n```crystal\na = {x: 5, s: \"foo \"}\nb = {x: 6, s: \"foo\"}\n\ndiff = Hashdiff.diff(a, b, numeric_tolerance: 0.1, strip: true)\ndiff.should == [{\"~\", \"x\", 5, 6}]\n```\n\n#### `:case_insensitive`\n\nThe :case_insensitive option makes string comparisons ignore case.\n\n```crystal\na = {x: 5, s: \"FooBar\"}\nb = {x: 6, s: \"foobar\"}\n\ndiff = Hashdiff.diff(a, b, numeric_tolerance: 0.1, case_insensitive: true)\ndiff.should == [{\"~\", \"x\", 5, 6}]\n```\n\n#### `:array_path`\n\nThe :array_path option represents the path of the diff in an array rather than\na string. This can be used to show differences in between hash key types and\nis useful for `patch!` when used on hashes without string keys.\n\n```crystal\na = {x: 5}\nb = {\"x\" => 6}\n\ndiff = Hashdiff.diff(a, b, array_path: true)\ndiff.should == [{\"-\", [:x], 5}, {\"+\", [\"x\"], 6}]\n```\n\nFor cases where there are arrays in paths their index will be added to the path.\n\n```crystal\na = {x: [0,1]}\nb = {x: [0,2]}\n\ndiff = Hashdiff.diff(a, b, array_path: true)\ndiff.should == [{\"-\", [:x, 1], 1}, {\"+\", [:x, 1], 2}]\n```\n\nThis shouldn't cause problems if you are comparing an array with a hash:\n\n```crystal\na = {x: {0=>1}}\nb = {x: [1]}\n\ndiff = Hashdiff.diff(a, b, array_path: true)\ndiff.should == [{\"~\", [:x], {0=>1}, [1]}]\n```\n\n#### `:use_lcs`\n\nThe :use_lcs option is used to specify whether a\n[Longest common subsequence](https://en.wikipedia.org/wiki/Longest_common_subsequence_problem)\n(LCS) algorithm is used to determine differences in arrays. This defaults to\n`true` but can be changed to `false` for significantly faster array comparisons\n(O(n) complexity rather than O(n<sup>2</sup>) for LCS).\n\nWhen :use_lcs is false the results of array comparisons have a tendency to\nshow changes at indexes rather than additions and subtractions when :use_lcs is\ntrue.\n\nNote, currently the :similarity option has no effect when :use_lcs is false.\n\n```crystal\na = {x: [0, 1, 2]}\nb = {x: [0, 2, 2, 3]}\n\ndiff = Hashdiff.diff(a, b, use_lcs: false)\ndiff.should == [{\"~\", \"x[1]\", 1, 2}, {\"+\", \"x[3]\", 3}]\n```\n\n#### Specifying a custom comparison method\n\nIt's possible to specify how the values of a key should be compared.\n\n```crystal\na = {a: \"car\", b: \"boat\", c: \"plane\"}\nb = {a: \"bus\", b: \"truck\", c: \" plan\"}\n\ndiff = Hashdiff.diff(a, b) do |path, obj1, obj2|\n  case path\n  when  /a|b|c/\n    obj1.length == obj2.length\n  end\nend\n\ndiff.should == [{\"~\", \"b\", \"boat\", \"truck\"}]\n```\n\nThe yielded params of the comparison block is `|path, obj1, obj2|`, in which path is the key (or delimited compound key) to the value being compared. When comparing elements in array, the path is with the format `array[*]`. For example:\n\n```crystal\na = {a: \"car\", b: [\"boat\", \"plane\"] }\nb = {a: \"bus\", b: [\"truck\", \" plan\"] }\n\ndiff = Hashdiff.diff(a, b) do |path, obj1, obj2|\n  case path\n  when \"b[*]\"\n    obj1.length == obj2.length\n  end\nend\n\ndiff.should == [{\"~\", \"a\", \"car\", \"bus\"}, {\"~\", \"b[1]\", \"plane\", \" plan\"}, {\"-\", \"b[0]\", \"boat\"}, {\"+\", \"b[0]\", \"truck\"}]\n```\n\nWhen a comparison block is given, it'll be given priority over other specified options. If the block returns value other than `true` or `false`, then the two values will be compared with other specified options.\n\nWhen used in conjunction with the `array_path` option, the path passed in as an argument will be an array. When determining the ordering of an array a key of `\"*\"` will be used in place of the `key[*]` field. It is possible, if you have hashes with integer or `\"*\"` keys, to have problems distinguishing between arrays and hashes - although this shouldn't be an issue unless your data is very difficult to predict and/or your custom rules are very specific.\n\n#### Sorting arrays before comparison\n\nAn order difference alone between two arrays can create too many diffs to be useful. Consider sorting them prior to diffing.\n\n```crystal\na = {a: \"car\", b: [\"boat\", \"plane\"] }\nb = {a: \"car\", b: [\"plane\", \"boat\"] }\n\nHashdiff.diff(a, b).should == [{\"+\", \"b[0]\", \"plane\"}, {\"-\", \"b[2]\", \"plane\"}]\n\nb[:b].sort!\n\nHashdiff.diff(a, b).should == []\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/spoved/hashdiff.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Holden Omans](https://github.com/kalinon) - creator and maintainer\n- Krzysztof Rybka ([@krzysiek1507](https://github.com/krzysiek1507)) - hashdiff gem maintainer\n- Fengyun Liu ([@liufengyun](https://github.com/liufengyun)) - hashdiff gem maintainer\n","program":{"html_id":"hashdiff/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"hashdiff","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"hashdiff/Hashdiff","path":"Hashdiff.html","kind":"module","full_name":"Hashdiff","name":"Hashdiff","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hashdiff.cr","line_number":5,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff.cr#L5"},{"filename":"src/hashdiff/lcs.cr","line_number":3,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/lcs.cr#L3"},{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":1,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L1"},{"filename":"src/hashdiff/util.cr","line_number":1,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L1"},{"filename":"src/version.cr","line_number":1,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/version.cr#L1"}],"repository_name":"hashdiff","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(\"hashdiff\")","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"1.0.1\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"hashdiff/Hashdiff","kind":"module","full_name":"Hashdiff","name":"Hashdiff"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"best_diff(obj1,obj2,**options)-instance-method","name":"best_diff","doc":"Best diff two objects, which tries to generate the smallest change set using different similarity values.\n\nHashdiff.best_diff is useful in case of comparing two objects which include similar hashes in arrays.\n\nThe options to use when comparing\n  * :strict (Boolean) [true] whether numeric values will be compared on type as well as value.  Set to false to allow comparing Integer, Float, BigDecimal to each other\n  * :indifferent (Boolean) [false] whether to treat hash keys indifferently.  Set to true to ignore differences between symbol keys (ie. {a: 1} ~= {'a' => 1})\n  * :delimiter (String) ['.'] the delimiter used when returning nested key references\n  * :numeric_tolerance (Numeric) [0] should be a positive numeric value.  Value by which numeric differences must be greater than.  By default, numeric values are compared exactly; with the :tolerance option, the difference between numeric values must be greater than the given value.\n  * :strip (Boolean) [false] whether or not to call #strip on strings before comparing\n  * :array_path (Boolean) [false] whether to return the path references for nested values in an array, can be used for patch compatibility with non string keys.\n  * :use_lcs (Boolean) [true] whether or not to use an implementation of the Longest common subsequence algorithm for comparing arrays, produces better diffs but is slower.\n\nreturns an array of change tuples.\n  e.g. [{ '+', 'a.b', '45' }, { '-', 'a.c', '5' }, { '~', 'a.x', '45', '63 }']\n\n```\n  a = {'x' => [{'a' => 1, 'c' => 3, 'e' => 5}, {'y' => 3}]}\n  b = {'x' => [{'a' => 1, 'b' => 2, 'e' => 5}] }\n  diff = Hashdiff.best_diff(a, b)\n  diff.should == [{'-', 'x[0].c', 3}, {'+', 'x[0].b', 2}, {'-', 'x[1].y', 3}, {'-', 'x[1]', {}}]\n```","summary":"<p>Best diff two objects, which tries to generate the smallest change set using different similarity values.</p>","abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":""},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":""}],"args_string":"(obj1, obj2, **options)","args_html":"(obj1, obj2, **options)","location":{"filename":"src/hashdiff.cr","line_number":35,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff.cr#L35"},"def":{"name":"best_diff","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":""},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"opts = {similarity: 0.3}.merge(options)\ndiffs1 = diff(obj1, obj2, **opts)\ncount1 = count_diff(diffs1)\nopts = {similarity: 0.5}.merge(options)\ndiffs2 = diff(obj1, obj2, **opts)\ncount2 = count_diff(diffs2)\nopts = {similarity: 0.8}.merge(options)\ndiffs3 = diff(obj1, obj2, **opts)\ncount3 = count_diff(diffs3)\ncount, diffs = (count1 < count2) ? {count1, diffs1} : {count2, diffs2}\n(count < count3) ? diffs : diffs3\n"}},{"html_id":"comparable?(obj1:T,obj2:L,strict=true):BoolforallT,L-instance-method","name":"comparable?","doc":"check if objects are comparable","summary":"<p>check if objects are comparable</p>","abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"T"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"L"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":""}],"args_string":"(obj1 : T, obj2 : L, strict = true) : Bool forall T, L","args_html":"(obj1 : T, obj2 : L, strict = <span class=\"n\">true</span>) : Bool forall T, L","location":{"filename":"src/hashdiff/util.cr","line_number":20,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L20"},"def":{"name":"comparable?","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"T"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"L"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (obj1.is_a?(Array) && obj2.is_a?(Array))\n  return true\nend\nif (obj1.is_a?(Hash) && obj2.is_a?(Hash))\n  return true\nend\nif ((!strict) && obj1.is_a?(Number)) && obj2.is_a?(Number)\n  return true\nend\nobj1.is_a?(L) && obj2.is_a?(T)\n"}},{"html_id":"compare_values(obj1:Number,obj2:Number,**options):Bool-instance-method","name":"compare_values","doc":"check for equality or \"closeness\" within given tolerance","summary":"<p>check for equality or &quot;closeness&quot; within given tolerance</p>","abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"Number"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"Number"}],"args_string":"(obj1 : Number, obj2 : Number, **options) : Bool","args_html":"(obj1 : Number, obj2 : Number, **options) : Bool","location":{"filename":"src/hashdiff/util.cr","line_number":89,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L89"},"def":{"name":"compare_values","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"Number"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"Number"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if options[:numeric_tolerance]?.is_a?(Number)\n  (obj1 - obj2).abs <= (options[:numeric_tolerance]?.as(Number))\nelse\n  obj1 == obj2\nend"}},{"html_id":"compare_values(obj1:String,obj2:String,**options):Bool-instance-method","name":"compare_values","doc":"check for equality or \"closeness\" within given tolerance","summary":"<p>check for equality or &quot;closeness&quot; within given tolerance</p>","abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"String"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"String"}],"args_string":"(obj1 : String, obj2 : String, **options) : Bool","args_html":"(obj1 : String, obj2 : String, **options) : Bool","location":{"filename":"src/hashdiff/util.cr","line_number":98,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L98"},"def":{"name":"compare_values","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"String"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if options[:strip]? == true\n  obj1 = obj1.strip\n  obj2 = obj2.strip\nend\nif options[:case_insensitive]? == true\n  obj1 = obj1.downcase\n  obj2 = obj2.downcase\nend\nobj1 == obj2\n"}},{"html_id":"compare_values(obj1:T,obj2:L,**options):BoolforallT,L-instance-method","name":"compare_values","doc":"check for equality or \"closeness\" within given tolerance","summary":"<p>check for equality or &quot;closeness&quot; within given tolerance</p>","abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"T"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"L"}],"args_string":"(obj1 : T, obj2 : L, **options) : Bool forall T, L","args_html":"(obj1 : T, obj2 : L, **options) : Bool forall T, L","location":{"filename":"src/hashdiff/util.cr","line_number":84,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L84"},"def":{"name":"compare_values","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"T"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"L"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"obj1 == obj2"}},{"html_id":"count_diff(diffs)-instance-method","name":"count_diff","doc":"count node differences","summary":"<p>count node differences</p>","abstract":false,"args":[{"name":"diffs","doc":null,"default_value":"","external_name":"diffs","restriction":""}],"args_string":"(diffs)","args_html":"(diffs)","location":{"filename":"src/hashdiff/util.cr","line_number":28,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L28"},"def":{"name":"count_diff","args":[{"name":"diffs","doc":null,"default_value":"","external_name":"diffs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"diffs.sum(0) do |item|\n  old_change_count = count_nodes(item[2])\n  new_change_count = count_nodes(item[3]?)\n  old_change_count + new_change_count\nend"}},{"html_id":"count_nodes(obj)-instance-method","name":"count_nodes","doc":"count total nodes for an object","summary":"<p>count total nodes for an object</p>","abstract":false,"args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":""}],"args_string":"(obj)","args_html":"(obj)","location":{"filename":"src/hashdiff/util.cr","line_number":37,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L37"},"def":{"name":"count_nodes","args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if obj\nelse\n  return 0\nend\ncount = 0\nif obj.is_a?(Array)\n  obj.each do |e|\n    count = count + (count_nodes(e))\n  end\nelse\n  if obj.is_a?(Hash)\n    obj.each_value do |v|\n      count = count + (count_nodes(v))\n    end\n  else\n    return 1\n  end\nend\ncount\n"}},{"html_id":"decode_property_path(path,delimiter='.')-instance-method","name":"decode_property_path","doc":"decode property path into an array\n[String] path Property-string\n[String] delimiter Property-string delimiter\n\ne.g. \"a.b[3].c\" => ['a', 'b', 3, 'c']","summary":"<p>decode property path into an array [String] path Property-string [String] delimiter Property-string delimiter</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"delimiter","doc":null,"default_value":"'.'","external_name":"delimiter","restriction":""}],"args_string":"(path, delimiter = '.')","args_html":"(path, delimiter = <span class=\"s\">&#39;.&#39;</span>)","location":{"filename":"src/hashdiff/util.cr","line_number":57,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L57"},"def":{"name":"decode_property_path","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"delimiter","doc":null,"default_value":"'.'","external_name":"delimiter","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"memo = Array(String).new\npath.split(delimiter) do |part|\n  if match = (/^(.*)\\[(\\d+)\\]$/).match(part)\n    if match[1]? && (!match[2].empty?)\n      memo = memo + [match[1], match[2].to_i]\n    else\n      memo = memo + [match[2].to_i]\n    end\n  else\n    memo = memo + [part]\n  end\nend\nmemo\n"}},{"html_id":"diff(obj1:NamedTuple,obj2:NamedTuple,**options)-instance-method","name":"diff","doc":null,"summary":null,"abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"NamedTuple"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"NamedTuple"}],"args_string":"(obj1 : NamedTuple, obj2 : NamedTuple, **options)","args_html":"(obj1 : NamedTuple, obj2 : NamedTuple, **options)","location":{"filename":"src/hashdiff.cr","line_number":141,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff.cr#L141"},"def":{"name":"diff","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"NamedTuple"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"NamedTuple"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"diff(obj1.to_h, obj2.to_h, **options)"}},{"html_id":"diff(obj1:T,obj2:L,**options)forallT,L-instance-method","name":"diff","doc":"ameba:disable Metrics/CyclomaticComplexity","summary":"<p>ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"T"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"L"}],"args_string":"(obj1 : T, obj2 : L, **options) forall T, L","args_html":"(obj1 : T, obj2 : L, **options) forall T, L","location":{"filename":"src/hashdiff.cr","line_number":89,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff.cr#L89"},"def":{"name":"diff","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"T"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"L"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if obj1.is_a?(NamedTuple)\n  obj1 = obj1.to_h\nend\nif obj2.is_a?(NamedTuple)\n  obj2 = obj2.to_h\nend\nLog.trace do\n  \"Diff: #{obj1.class} and #{obj2.class}\"\nend\nopts = {prefix: \"\", similarity: 0.8, delimiter: \".\", strict: true, indifferent: false, strip: false, numeric_tolerance: 0_f64, array_path: false, use_lcs: true}.merge(options)\nif opts[:array_path] && (!opts[:prefix].is_a?(Array))\n  opts = opts.merge({prefix: Array(String).new})\nend\nresults = if obj1.nil? && obj2.nil?\n  Array(DiffResult).new\nelse\n  if obj1.nil? || obj2.nil?\n    [{\"~\", opts[:prefix], obj1, obj2}]\n  else\n    if !(comparable?(obj1, obj2, opts[:strict]))\n      [{\"~\", opts[:prefix], obj1, obj2}]\n    else\n      if (obj1.is_a?(Array) && obj2.is_a?(Array)) && opts[:use_lcs]\n        {% if T.union? || L.union? %}\n                  _array_compare({{ T.union? ? T.union_types : [T] }}, {{ L.union? ? L.union_types : [L] }}, LcsCompareArrays)\n                {% else %}\n                  LcsCompareArrays.call(obj1, obj2, **opts)\n                {% end %}\n      else\n        if (obj1.is_a?(Array) && obj2.is_a?(Array)) && (!opts[:use_lcs])\n          {% if T.union? || L.union? %}\n                  _array_compare({{ T.union? ? T.union_types : [T] }}, {{ L.union? ? L.union_types : [L] }}, LinearCompareArray)\n                {% else %}\n                  LinearCompareArray.call(obj1, obj2, **opts)\n                {% end %}\n        else\n          if obj1.is_a?(Hash) && obj2.is_a?(Hash)\n            {% if T.union? || L.union? %}\n                  _hash_compare({{ T.union? ? T.union_types : [T] }}, {{ L.union? ? L.union_types : [L] }}, CompareHashes)\n                {% else %}\n                  CompareHashes.call(obj1, obj2, **opts)\n                {% end %}\n          else\n            if compare_values(obj1, obj2, **opts)\n              Array(DiffResult).new\n            else\n              [{\"~\", opts[:prefix], obj1, obj2}]\n            end\n          end\n        end\n      end\n    end\n  end\nend\nresults\n"}},{"html_id":"diff_array_lcs(arraya,arrayb,**options,&)-instance-method","name":"diff_array_lcs","doc":"diff array using LCS algorithm","summary":"<p>diff array using LCS algorithm</p>","abstract":false,"args":[{"name":"arraya","doc":null,"default_value":"","external_name":"arraya","restriction":""},{"name":"arrayb","doc":null,"default_value":"","external_name":"arrayb","restriction":""}],"args_string":"(arraya, arrayb, **options, &)","args_html":"(arraya, arrayb, **options, &)","location":{"filename":"src/hashdiff.cr","line_number":146,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff.cr#L146"},"def":{"name":"diff_array_lcs","args":[{"name":"arraya","doc":null,"default_value":"","external_name":"arraya","restriction":""},{"name":"arrayb","doc":null,"default_value":"","external_name":"arrayb","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"change_set = Array(LcsDiffResult).new\nif arraya.empty? && arrayb.empty?\n  return change_set\nend\nif arraya.empty?\n  arrayb.each_index do |index|\n    change_set = change_set + [{\"+\", index, arrayb[index]}]\n  end\n  return change_set\nend\nif arrayb.empty?\n  arraya.each_index do |index|\n    i = (arraya.size - index) - 1\n    change_set = change_set + [{\"-\", i, arraya[i]}]\n  end\n  return change_set\nend\nopts = {prefix: \"\", similarity: 0.8, delimiter: \".\"}.merge(options)\nlinks = lcs(arraya, arrayb, **opts)\nyield links\nlinks << {arraya.size, arrayb.size}\nlast_x = -1\nlast_y = -1\nlinks.each do |pair|\n  x, y = pair\n  (x > (last_x + 1)) && (((x - last_x) - 2).downto(0)).each do |i|\n    change_set = change_set + [{\"-\", (last_y + i) + 1, arraya[(i + last_x) + 1]}]\n  end\n  (y > (last_y + 1)) && (0.upto((y - last_y) - 2)).each do |i|\n    change_set = change_set + [{\"+\", (last_y + i) + 1, arrayb[(i + last_y) + 1]}]\n  end\n  last_x = x\n  last_y = y\nend\nchange_set\n"}},{"html_id":"lcs(arraya,arrayb,**options):Array(Tuple(Int32,Int32))-instance-method","name":"lcs","doc":"caculate array difference using LCS algorithm\nhttp://en.wikipedia.org/wiki/Longest_common_subsequence_problem\nameba:disable Metrics/CyclomaticComplexity","summary":"<p>caculate array difference using LCS algorithm http://en.wikipedia.org/wiki/Longest_common_subsequence_problem ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"arraya","doc":null,"default_value":"","external_name":"arraya","restriction":""},{"name":"arrayb","doc":null,"default_value":"","external_name":"arrayb","restriction":""}],"args_string":"(arraya, arrayb, **options) : Array(Tuple(Int32, Int32))","args_html":"(arraya, arrayb, **options) : Array(Tuple(Int32, Int32))","location":{"filename":"src/hashdiff/lcs.cr","line_number":7,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/lcs.cr#L7"},"def":{"name":"lcs","args":[{"name":"arraya","doc":null,"default_value":"","external_name":"arraya","restriction":""},{"name":"arrayb","doc":null,"default_value":"","external_name":"arrayb","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Tuple(Int32, Int32))","visibility":"Public","body":"if arraya.empty? || arrayb.empty?\n  return Array(Tuple(Int32, Int32)).new\nend\nopts = {similarity: 0.8, prefix: \"\"}.merge(options)\nopts = opts.merge({prefix: prefix_append_array_index(**opts, array_index: \"*\")})\na_start = b_start = 0\na_finish = arraya.size - 1\nb_finish = arrayb.size - 1\nvector = Array(Tuple(Int32, Int32)).new\nlcs = Array(Array(Tuple(Symbol, Int32))).new\n(b_start..b_finish).each do |bi|\n  lcs.insert(bi, Array(Tuple(Symbol, Int32)).new)\n  (a_start..a_finish).each do |ai|\n    if similar?(arraya[ai], arrayb[bi], **opts)\n      topleft = (ai > 0) && (bi > 0) ? lcs[bi - 1][ai - 1][1].as(Int32) : 0\n      lcs[bi].insert(ai, {:topleft, topleft + 1})\n    else\n      if (      top = bi > 0 ? lcs[bi - 1][ai][1] : 0)\n        left = ai > 0 ? lcs[bi][ai - 1][1].as(Int32) : 0\n        count = top > left ? top : left\n        direction = if top > left\n          :top\n        else\n          if top < left\n            :left\n          else\n            if bi.zero?\n              :top\n            else\n              if ai.zero?\n                :left\n              else\n                :both\n              end\n            end\n          end\n        end\n        lcs[bi].insert(ai, {direction, count})\n      end\n    end\n  end\nend\nx = a_finish\ny = b_finish\nwhile ((x >= 0) && (y >= 0)) && (lcs[y][x][1] > 0)\n  if lcs[y][x][0] == (:both)\n    x = x - 1\n  else\n    if lcs[y][x][0] == (:topleft)\n      vector.insert(0, {x, y})\n      x = x - 1\n      y = y - 1\n    else\n      if lcs[y][x][0] == (:top)\n        y = y - 1\n      else\n        if lcs[y][x][0] == (:left)\n          x = x - 1\n        end\n      end\n    end\n  end\nend\nvector\n"}},{"html_id":"node(hash:Hash(K,V),parts:Array(W))forallK,V,W-instance-method","name":"node","doc":"get the node of hash by given path parts","summary":"<p>get the node of hash by given path parts</p>","abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(K, V)"},{"name":"parts","doc":null,"default_value":"","external_name":"parts","restriction":"Array(W)"}],"args_string":"(hash : Hash(K, V), parts : Array(W)) forall K, V, W","args_html":"(hash : Hash(K, V), parts : Array(W)) forall K, V, W","location":{"filename":"src/hashdiff/util.cr","line_number":74,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L74"},"def":{"name":"node","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Hash(K, V)"},{"name":"parts","doc":null,"default_value":"","external_name":"parts","restriction":"Array(W)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"t = hash.dup\nparts.each do |part|\n  if t.is_a?(Indexable)\n  else\n    return t\n  end\n  t = t[part]\nend\nt\n"}},{"html_id":"prefix_append_array_index(prefix:Array(T),array_index:V,**opts)forallT,V-instance-method","name":"prefix_append_array_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"Array(T)"},{"name":"array_index","doc":null,"default_value":"","external_name":"array_index","restriction":"V"}],"args_string":"(prefix : Array(T), array_index : V, **opts) forall T, V","args_html":"(prefix : Array(T), array_index : V, **opts) forall T, V","location":{"filename":"src/hashdiff/util.cr","line_number":122,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L122"},"def":{"name":"prefix_append_array_index","args":[{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"Array(T)"},{"name":"array_index","doc":null,"default_value":"","external_name":"array_index","restriction":"V"}],"double_splat":{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"prefix + [array_index]"}},{"html_id":"prefix_append_array_index(prefix:String,array_index,**opts)-instance-method","name":"prefix_append_array_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"String"},{"name":"array_index","doc":null,"default_value":"","external_name":"array_index","restriction":""}],"args_string":"(prefix : String, array_index, **opts)","args_html":"(prefix : String, array_index, **opts)","location":{"filename":"src/hashdiff/util.cr","line_number":126,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L126"},"def":{"name":"prefix_append_array_index","args":[{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"String"},{"name":"array_index","doc":null,"default_value":"","external_name":"array_index","restriction":""}],"double_splat":{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{prefix}[#{array_index}]\""}},{"html_id":"prefix_append_key(key:V,prefix:Array(T),**opts)forallT,V-instance-method","name":"prefix_append_key","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"V"},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"Array(T)"}],"args_string":"(key : V, prefix : Array(T), **opts) forall T, V","args_html":"(key : V, prefix : Array(T), **opts) forall T, V","location":{"filename":"src/hashdiff/util.cr","line_number":112,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L112"},"def":{"name":"prefix_append_key","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"V"},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"Array(T)"}],"double_splat":{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.trace do\n  \"prefix_append_key(#{key}, #{prefix})\"\nend\nprefix + [key]\n"}},{"html_id":"prefix_append_key(key,prefix:String,**opts)-instance-method","name":"prefix_append_key","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"String"}],"args_string":"(key, prefix : String, **opts)","args_html":"(key, prefix : String, **opts)","location":{"filename":"src/hashdiff/util.cr","line_number":117,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L117"},"def":{"name":"prefix_append_key","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"String"}],"double_splat":{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.trace do\n  \"prefix_append_key(#{key}, #{prefix})\"\nend\nprefix.empty? ? key.to_s : \"#{prefix}#{opts[:delimiter]}#{key}\"\n"}},{"html_id":"similar?(obja,objb,**options):Bool-instance-method","name":"similar?","doc":"judge whether two objects are similar","summary":"<p>judge whether two objects are similar</p>","abstract":false,"args":[{"name":"obja","doc":null,"default_value":"","external_name":"obja","restriction":""},{"name":"objb","doc":null,"default_value":"","external_name":"objb","restriction":""}],"args_string":"(obja, objb, **options) : Bool","args_html":"(obja, objb, **options) : Bool","location":{"filename":"src/hashdiff/util.cr","line_number":5,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/util.cr#L5"},"def":{"name":"similar?","args":[{"name":"obja","doc":null,"default_value":"","external_name":"obja","restriction":""},{"name":"objb","doc":null,"default_value":"","external_name":"objb","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (!options[:comparison]?) && (!(any_hash_or_array?(obja, objb)))\n  return compare_values(obja, objb, **options)\nend\ncount_a = count_nodes(obja)\ncount_b = count_nodes(objb)\nif (count_a + count_b).zero?\n  return true\nend\nopts = {similarity: 0.8}.merge(options)\ndiffs = count_diff(diff(obja, objb, **opts))\n(1 - (diffs / (count_a + count_b).to_f)) >= opts[:similarity]\n"}}],"macros":[],"types":[{"html_id":"hashdiff/Hashdiff/CompareHashes","path":"Hashdiff/CompareHashes.html","kind":"module","full_name":"Hashdiff::CompareHashes","name":"CompareHashes","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hashdiff/compare_hashes.cr","line_number":3,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/compare_hashes.cr#L3"}],"repository_name":"hashdiff","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"hashdiff/Hashdiff/CompareHashes","kind":"module","full_name":"Hashdiff::CompareHashes","name":"CompareHashes"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"hashdiff/Hashdiff","kind":"module","full_name":"Hashdiff","name":"Hashdiff"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"call(obj1:Hash(K,V),obj2:Hash(T,L),**opts)forallK,V,T,L-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"Hash(K, V)"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"Hash(T, L)"}],"args_string":"(obj1 : Hash(K, V), obj2 : Hash(T, L), **opts) forall K, V, T, L","args_html":"(obj1 : Hash(K, V), obj2 : Hash(T, L), **opts) forall K, V, T, L","location":{"filename":"src/hashdiff/compare_hashes.cr","line_number":6,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/compare_hashes.cr#L6"},"def":{"name":"call","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"Hash(K, V)"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"Hash(T, L)"}],"double_splat":{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = Array(DiffResult).new\nif obj1.empty? && obj2.empty?\n  return result\nend\nobj1_keys = Array(String | Symbol).new + obj1.keys\nobj2_keys = Array(String | Symbol).new + obj2.keys\nobj1_lookup = Hash(String, String | K | V | T | L | Nil).new\nobj2_lookup = Hash(String, String | K | V | T | L | Nil).new\nif opts[:indifferent]\n  obj1_lookup = obj1.keys.to_h do |k|\n    {k.to_s, k}\n  end\n  obj2_lookup = obj2.keys.to_h do |k|\n    {k.to_s, k}\n  end\n  obj1_keys = obj1_keys.map do |k|\n    k.is_a?(Symbol) ? k.to_s : k\n  end\n  obj2_keys = obj2_keys.map do |k|\n    k.is_a?(Symbol) ? k.to_s : k\n  end\nend\nadded_keys = (obj2_keys - obj1_keys).sort_by(&.to_s)\ncommon_keys = (obj1_keys & obj2_keys).sort_by(&.to_s)\ndeleted_keys = (obj1_keys - obj2_keys).sort_by(&.to_s)\ndeleted_keys.each do |k|\n  k = opts[:indifferent] ? obj1_lookup[k] : k\n  change_key = Hashdiff.prefix_append_key(k, **opts)\n  result = result + [{\"-\", change_key, obj1[k]}]\nend\nadded_keys.each do |k|\n  change_key = Hashdiff.prefix_append_key(k, **opts)\n  k = opts[:indifferent] ? obj2_lookup[k] : k\n  result = result + [{\"+\", change_key, obj2[k]}]\nend\ncommon_keys.each do |k|\n  prefix = Hashdiff.prefix_append_key(k, **opts)\n  k1 = opts[:indifferent] ? obj1_lookup[k] : k\n  k2 = opts[:indifferent] ? obj2_lookup[k] : k\n  (Hashdiff.diff(obj1[k1]?, obj2[k2]?, **opts.merge(prefix: prefix))).each do |change|\n    result = result + [change]\n  end\nend\nresult\n"}}],"macros":[],"types":[]},{"html_id":"hashdiff/Hashdiff/LcsCompareArrays","path":"Hashdiff/LcsCompareArrays.html","kind":"module","full_name":"Hashdiff::LcsCompareArrays","name":"LcsCompareArrays","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hashdiff/lcs_compare_arrays.cr","line_number":4,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/lcs_compare_arrays.cr#L4"}],"repository_name":"hashdiff","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"hashdiff/Hashdiff/LcsCompareArrays","kind":"module","full_name":"Hashdiff::LcsCompareArrays","name":"LcsCompareArrays"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"hashdiff/Hashdiff","kind":"module","full_name":"Hashdiff","name":"Hashdiff"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"call(obj1:Array(T),obj2:Array(L),**opts)forallT,L-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"Array(T)"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"Array(L)"}],"args_string":"(obj1 : Array(T), obj2 : Array(L), **opts) forall T, L","args_html":"(obj1 : Array(T), obj2 : Array(L), **opts) forall T, L","location":{"filename":"src/hashdiff/lcs_compare_arrays.cr","line_number":7,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/lcs_compare_arrays.cr#L7"},"def":{"name":"call","args":[{"name":"obj1","doc":null,"default_value":"","external_name":"obj1","restriction":"Array(T)"},{"name":"obj2","doc":null,"default_value":"","external_name":"obj2","restriction":"Array(L)"}],"double_splat":{"name":"opts","doc":null,"default_value":"","external_name":"opts","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = Array(DiffResult).new\nchangeset = Hashdiff.diff_array_lcs(obj1, obj2, **opts) do |lcs|\n  lcs.each do |pair|\n    prefix = Hashdiff.prefix_append_array_index(**opts, array_index: pair[0])\n    (Hashdiff.diff(obj1[pair[0]], obj2[pair[1]], **opts.merge(prefix: prefix))).each do |change|\n      result = result + [change]\n    end\n  end\nend\nchangeset.each do |change|\n  if (change[0] != \"-\") && (change[0] != \"+\")\n    next\n  end\n  change_key = Hashdiff.prefix_append_array_index(**opts, array_index: change[1])\n  result = result + [{change[0], change_key, change[2]}]\nend\nresult\n"}}],"macros":[],"types":[]},{"html_id":"hashdiff/Hashdiff/LinearCompareArray","path":"Hashdiff/LinearCompareArray.html","kind":"class","full_name":"Hashdiff::LinearCompareArray(T, V)","name":"LinearCompareArray","abstract":false,"superclass":{"html_id":"hashdiff/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hashdiff/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hashdiff/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":4,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L4"}],"repository_name":"hashdiff","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"hashdiff/Hashdiff","kind":"module","full_name":"Hashdiff","name":"Hashdiff"},"doc":"Used to compare arrays in a linear complexity, which produces longer diffs\nthan using the lcs algorithm but is considerably faster","summary":"<p>Used to compare arrays in a linear complexity, which produces longer diffs than using the lcs algorithm but is considerably faster</p>","class_methods":[{"html_id":"call(old_array:Array(L),new_array:Array(M),**options)forallL,M,T,V-class-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"old_array","doc":null,"default_value":"","external_name":"old_array","restriction":"Array(L)"},{"name":"new_array","doc":null,"default_value":"","external_name":"new_array","restriction":"Array(M)"}],"args_string":"(old_array : Array(L), new_array : Array(M), **options) forall L, M, T, V","args_html":"(old_array : Array(L), new_array : Array(M), **options) forall L, M, T, V","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":5,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L5"},"def":{"name":"call","args":[{"name":"old_array","doc":null,"default_value":"","external_name":"old_array","restriction":"Array(L)"},{"name":"new_array","doc":null,"default_value":"","external_name":"new_array","restriction":"Array(M)"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(LinearCompareArray(L, M).new(old_array, new_array, **options)).call"}}],"constructors":[{"html_id":"new(old_array:Array(T),new_array:Array(V),**options)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"old_array","doc":null,"default_value":"","external_name":"old_array","restriction":"Array(T)"},{"name":"new_array","doc":null,"default_value":"","external_name":"new_array","restriction":"Array(V)"}],"args_string":"(old_array : Array(T), new_array : Array(V), **options)","args_html":"(old_array : Array(T), new_array : Array(V), **options)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":31,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L31"},"def":{"name":"new","args":[{"name":"old_array","doc":null,"default_value":"","external_name":"old_array","restriction":"Array(T)"},{"name":"new_array","doc":null,"default_value":"","external_name":"new_array","restriction":"Array(V)"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LinearCompareArray(T, V).allocate\n_.initialize(old_array, new_array, **options)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"additions-instance-method","name":"additions","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":24,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L24"},"def":{"name":"additions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@additions"}},{"html_id":"append_addition(item,index)-instance-method","name":"append_addition","doc":null,"summary":null,"abstract":false,"args":[{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":""},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(item, index)","args_html":"(item, index)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":166,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L166"},"def":{"name":"append_addition","args":[{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":""},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"key = Hashdiff.prefix_append_array_index(**options, array_index: index)\nself.additions << {\"+\", key, item}\n"}},{"html_id":"append_addititions_before_match(match_index)-instance-method","name":"append_addititions_before_match","doc":null,"summary":null,"abstract":false,"args":[{"name":"match_index","doc":null,"default_value":"","external_name":"match_index","restriction":""}],"args_string":"(match_index)","args_html":"(match_index)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":150,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L150"},"def":{"name":"append_addititions_before_match","args":[{"name":"match_index","doc":null,"default_value":"","external_name":"match_index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if match_index\nelse\n  return\nend\n(new_index...match_index).each do |i|\n  append_addition(new_array[i], i)\nend\nself.expected_additions = expected_additions - (match_index - new_index)\nself.new_index = match_index\n"}},{"html_id":"append_deletion(item,index)-instance-method","name":"append_deletion","doc":null,"summary":null,"abstract":false,"args":[{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":""},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(item, index)","args_html":"(item, index)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":171,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L171"},"def":{"name":"append_deletion","args":[{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":""},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"key = Hashdiff.prefix_append_array_index(**options, array_index: index)\nself.deletions << {\"-\", key, item}\n"}},{"html_id":"append_deletions_before_match(match_index)-instance-method","name":"append_deletions_before_match","doc":null,"summary":null,"abstract":false,"args":[{"name":"match_index","doc":null,"default_value":"","external_name":"match_index","restriction":""}],"args_string":"(match_index)","args_html":"(match_index)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":158,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L158"},"def":{"name":"append_deletions_before_match","args":[{"name":"match_index","doc":null,"default_value":"","external_name":"match_index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if match_index\nelse\n  return\nend\n(old_index...match_index).each do |i|\n  append_deletion(old_array[i], i)\nend\nself.expected_additions = expected_additions + (match_index - new_index)\nself.old_index = match_index\n"}},{"html_id":"append_differences(difference:Array(Tuple))-instance-method","name":"append_differences","doc":null,"summary":null,"abstract":false,"args":[{"name":"difference","doc":null,"default_value":"","external_name":"difference","restriction":"Array(Tuple)"}],"args_string":"(difference : Array(Tuple))","args_html":"(difference : Array(Tuple))","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":176,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L176"},"def":{"name":"append_differences","args":[{"name":"difference","doc":null,"default_value":"","external_name":"difference","restriction":"Array(Tuple)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@differences = @differences + difference"}},{"html_id":"call-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":46,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L46"},"def":{"name":"call","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if old_array.empty? && new_array.empty?\n  return Array(DiffResult).new\nend\nself.old_index = 0\nself.new_index = 0\nself.expected_additions = new_array.size - old_array.size\ndifferences = Array(DiffResult).new\nloop do\n  if extra_items_in_old_array?\n    append_deletion(old_array[old_index], old_index)\n  else\n    if extra_items_in_new_array?\n      append_addition(new_array[new_index], new_index)\n    else\n      _diffs = compare_at_index\n      if (!_diffs.nil?) && _diffs.is_a?(Array)\n        _diffs.each do |diff|\n          differences = differences + [diff]\n        end\n      end\n    end\n  end\n  self.old_index = old_index + 1\n  self.new_index = new_index + 1\n  if iterated_through_both_arrays?\n    break\n  end\nend\n(differences + self.additions) + self.deletions.reverse\n"}},{"html_id":"compare_at_index-instance-method","name":"compare_at_index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":93,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L93"},"def":{"name":"compare_at_index","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"difference = item_difference(old_array[old_index], new_array[new_index], old_index)\nif difference.empty?\n  return nil\nend\nindex_after_additions = index_of_match_after_additions\nappend_addititions_before_match(index_after_additions)\nindex_after_deletions = index_of_match_after_deletions\nappend_deletions_before_match(index_after_deletions)\nmatch = index_after_additions || index_after_deletions\nif match\nelse\n  return difference\nend\nnil\n"}},{"html_id":"deletions-instance-method","name":"deletions","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":25,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L25"},"def":{"name":"deletions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@deletions"}},{"html_id":"expected_additions:Int32-instance-method","name":"expected_additions","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":29,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L29"},"def":{"name":"expected_additions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@expected_additions"}},{"html_id":"expected_additions=(expected_additions:Int32)-instance-method","name":"expected_additions=","doc":null,"summary":null,"abstract":false,"args":[{"name":"expected_additions","doc":null,"default_value":"","external_name":"expected_additions","restriction":"Int32"}],"args_string":"(expected_additions : Int32)","args_html":"(expected_additions : Int32)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":29,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L29"},"def":{"name":"expected_additions=","args":[{"name":"expected_additions","doc":null,"default_value":"","external_name":"expected_additions","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@expected_additions = expected_additions"}},{"html_id":"extra_items_in_new_array?-instance-method","name":"extra_items_in_new_array?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":85,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L85"},"def":{"name":"extra_items_in_new_array?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new_index < new_array.size && old_index >= old_array.size"}},{"html_id":"extra_items_in_old_array?-instance-method","name":"extra_items_in_old_array?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":81,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L81"},"def":{"name":"extra_items_in_old_array?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"old_index < old_array.size && new_index >= new_array.size"}},{"html_id":"index_of_match_after_additions-instance-method","name":"index_of_match_after_additions","doc":"look ahead in the new array to see if the current item appears later\nthereby having new items added","summary":"<p>look ahead in the new array to see if the current item appears later thereby having new items added</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":116,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L116"},"def":{"name":"index_of_match_after_additions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if expected_additions > 0\nelse\n  return\nend\n(1..expected_additions).each do |i|\n  next_difference = item_difference(old_array[old_index], new_array[new_index + i], old_index)\n  if next_difference.empty?\n    return new_index + i\n  end\nend\nnil\n"}},{"html_id":"index_of_match_after_deletions-instance-method","name":"index_of_match_after_deletions","doc":"look ahead in the old array to see if the current item appears later\nthereby having items removed","summary":"<p>look ahead in the old array to see if the current item appears later thereby having items removed</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":134,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L134"},"def":{"name":"index_of_match_after_deletions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if expected_additions < 0\nelse\n  return\nend\n(1..(expected_additions.abs)).each do |i|\n  next_difference = item_difference(old_array[old_index + i], new_array[new_index], old_index)\n  if next_difference.empty?\n    return old_index + i\n  end\nend\nnil\n"}},{"html_id":"item_difference(old_item,new_item,item_index)-instance-method","name":"item_difference","doc":null,"summary":null,"abstract":false,"args":[{"name":"old_item","doc":null,"default_value":"","external_name":"old_item","restriction":""},{"name":"new_item","doc":null,"default_value":"","external_name":"new_item","restriction":""},{"name":"item_index","doc":null,"default_value":"","external_name":"item_index","restriction":""}],"args_string":"(old_item, new_item, item_index)","args_html":"(old_item, new_item, item_index)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":109,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L109"},"def":{"name":"item_difference","args":[{"name":"old_item","doc":null,"default_value":"","external_name":"old_item","restriction":""},{"name":"new_item","doc":null,"default_value":"","external_name":"new_item","restriction":""},{"name":"item_index","doc":null,"default_value":"","external_name":"item_index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"prefix = Hashdiff.prefix_append_array_index(**options, array_index: item_index)\nHashdiff.diff(old_item, new_item, **options.merge(prefix: prefix))\n"}},{"html_id":"iterated_through_both_arrays?-instance-method","name":"iterated_through_both_arrays?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":89,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L89"},"def":{"name":"iterated_through_both_arrays?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"old_index >= old_array.size && new_index >= new_array.size"}},{"html_id":"new_array:Array(V)-instance-method","name":"new_array","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(V)","args_html":" : Array(V)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":22,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L22"},"def":{"name":"new_array","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(V)","visibility":"Public","body":"@new_array"}},{"html_id":"new_index:Int32-instance-method","name":"new_index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":28,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L28"},"def":{"name":"new_index","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@new_index"}},{"html_id":"new_index=(new_index:Int32)-instance-method","name":"new_index=","doc":null,"summary":null,"abstract":false,"args":[{"name":"new_index","doc":null,"default_value":"","external_name":"new_index","restriction":"Int32"}],"args_string":"(new_index : Int32)","args_html":"(new_index : Int32)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":28,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L28"},"def":{"name":"new_index=","args":[{"name":"new_index","doc":null,"default_value":"","external_name":"new_index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@new_index = new_index"}},{"html_id":"old_array:Array(T)-instance-method","name":"old_array","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(T)","args_html":" : Array(T)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":21,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L21"},"def":{"name":"old_array","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"@old_array"}},{"html_id":"old_index:Int32-instance-method","name":"old_index","doc":"getter differences = Array(Tuple(String, Array(Int32 | String | Symbol) | Array(Int32 | String) | String, T) | Tuple(String, Array(Int32 | String | Symbol) | Array(Int32 | String) | String, V)).new","summary":"<p>getter differences = Array(Tuple(String, Array(Int32 | String | Symbol) | Array(Int32 | String) | String, T) | Tuple(String, Array(Int32 | String | Symbol) | Array(Int32 | String) | String, V)).new</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":27,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L27"},"def":{"name":"old_index","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@old_index"}},{"html_id":"old_index=(old_index:Int32)-instance-method","name":"old_index=","doc":"getter differences = Array(Tuple(String, Array(Int32 | String | Symbol) | Array(Int32 | String) | String, T) | Tuple(String, Array(Int32 | String | Symbol) | Array(Int32 | String) | String, V)).new","summary":"<p>getter differences = Array(Tuple(String, Array(Int32 | String | Symbol) | Array(Int32 | String) | String, T) | Tuple(String, Array(Int32 | String | Symbol) | Array(Int32 | String) | String, V)).new</p>","abstract":false,"args":[{"name":"old_index","doc":null,"default_value":"","external_name":"old_index","restriction":"Int32"}],"args_string":"(old_index : Int32)","args_html":"(old_index : Int32)","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":27,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L27"},"def":{"name":"old_index=","args":[{"name":"old_index","doc":null,"default_value":"","external_name":"old_index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@old_index = old_index"}},{"html_id":"options:Options-instance-method","name":"options","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Options","args_html":" : <a href=\"../Hashdiff/LinearCompareArray/Options.html\">Options</a>","location":{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":23,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L23"},"def":{"name":"options","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Options","visibility":"Public","body":"@options"}}],"macros":[],"types":[{"html_id":"hashdiff/Hashdiff/LinearCompareArray/Options","path":"Hashdiff/LinearCompareArray/Options.html","kind":"alias","full_name":"Hashdiff::LinearCompareArray::Options","name":"Options","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hashdiff/linear_compare_arrays.cr","line_number":9,"url":"https://github.com/spoved/hashdiff.cr/blob/ee0441e4e163ebc76d69ed08970b75028f2891cb/src/hashdiff/linear_compare_arrays.cr#L9"}],"repository_name":"hashdiff","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(similarity: Float64, delimiter: String, strict: Bool, indifferent: Bool, strip: Bool, numeric_tolerance: Float64, array_path: Bool, use_lcs: Bool, case_insensitive: Bool, prefix: Array(String | Symbol) | Array(String) | String)","aliased_html":"{similarity: Float64, delimiter: String, strict: Bool, indifferent: Bool, strip: Bool, numeric_tolerance: Float64, array_path: Bool, use_lcs: Bool, case_insensitive: Bool, prefix: Array(String | Symbol) | Array(String) | String}","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"hashdiff/Hashdiff/LinearCompareArray","kind":"class","full_name":"Hashdiff::LinearCompareArray(T, V)","name":"LinearCompareArray"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}]}}